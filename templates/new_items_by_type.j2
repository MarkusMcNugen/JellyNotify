{#
  New Items By Type Jinja2 Discord Webhook Template for Jellynouncer
  =========================================================

  This template generates Discord embed messages for newly added media items in Jellyfin.
  It supports multiple media categories with specialized formatting for each type.

  Required Variables:
  ------------------
  - category (str): Media category ('movies', 'tv', 'music', 'other')
  - total_items (int): Total number of items added
  - new_items (list): List of media items with their metadata
  - jellyfin_url (str): Base URL of the Jellyfin server
  - timestamp (str): ISO 8601 formatted timestamp of when items were added

  Optional Variables:
  ------------------
  - tvdb_attribution_needed (bool): Whether to show TVDb attribution in footer

  Item Data Structure:
  -------------------
  Each item in new_items should contain:
  - item: Media item object with properties:
    - name (str): Item title
    - year (int): Release year (movies)
    - overview (str): Description/synopsis
    - video_height (int): Video resolution height in pixels
    - video_range (str): HDR type ('SDR', 'HDR', 'HDR10', etc.)
    - video_codec (str): Video codec name
    - audio_codec (str): Audio codec name
    - audio_channels (int): Number of audio channels
    - audio_bitrate (int): Audio bitrate in bps (music)
    - runtime_ticks (int): Duration in ticks (10,000,000 ticks = 1 second)
    - imdb_id (str): IMDb identifier
    - tmdb_id (str): TMDb identifier
    - tvdb_id (str): TVDb identifier
    - series_name (str): TV series name (TV episodes)
    - season_number (int): Season number (TV episodes)
    - episode_number (int): Episode number (TV episodes)
    - album (str): Album name (music)
    - artists (list): List of artist names (music)
    - item_type (str): Media type identifier
  - ratings (dict): Rating information from various sources
    - imdb: {value: float}
    - rotten_tomatoes: {value: int}
    - metacritic: {value: int}
    - tmdb: {value: float}
    - tvdb: {value: float, proper_url: str}

  Discord Embed Limits:
  --------------------
  - Max 10 embeds per webhook message
  - Max 25 fields per embed
  - Max 256 characters per field name
  - Max 1024 characters per field value
  - Max 6000 characters total per embed
  - Max 2048 characters for description
  - Max 256 characters for title

  Output Format:
  -------------
  Discord webhook JSON with embedded rich content including:
  - Formatted title with item count
  - Color-coded embeds (green: 65280)
  - Detailed media information fields
  - Technical specifications (resolution, codecs, audio)
  - External links to media databases
  - Jellyfin branding elements
#}
{
  "embeds": [
    {% if category == 'movies' %}
    {# ==================== MOVIES EMBED ==================== #}
    {
      "title": "üé¨ New Movies Added ({{ total_items }})",
      "description": "The following movies have been added to Jellyfin:",
      "color": 65280,{# Green color in decimal #}
      "fields": [
        {# Process up to 8 movies to stay within Discord limits #}
        {% for item_data in new_items[:8] %}
        {
          {# Movie title with year - max 256 chars for field name #}
          "name": "{{ (item_data.item.name[:230] + '...') if item_data.item.name|length > 230 else item_data.item.name }}
        {%- if item_data.item.year %} ({{ item_data.item.year }}){% endif %}",

          {# Field value with multiple components - max 1024 chars #}
          "value": "
        {%- if item_data.item.overview -%}
          *{{ (item_data.item.overview[:150] + '...') if item_data.item.overview|length > 150 else item_data.item.overview }}*\n
        {%- endif -%}

        {%- if item_data.item.video_height -%}
          üìê {{ item_data.item.video_height }}p
          {%- if item_data.item.video_range and item_data.item.video_range != 'SDR' -%}
            {{ ' ' + item_data.item.video_range }}
          {%- endif -%}
        {%- endif -%}

        {%- if item_data.item.video_codec -%}
          {{ ' ‚Ä¢ üéûÔ∏è ' + item_data.item.video_codec.upper() }}
        {%- endif -%}

        {%- if item_data.item.audio_codec -%}
          {{ ' ‚Ä¢ üîä ' + item_data.item.audio_codec.upper() }}
          {%- if item_data.item.audio_channels -%}
            {{ ' ' + item_data.item.audio_channels|string + '.' }}
            {%- if item_data.item.audio_channels > 2 -%}1{%- else -%}0{%- endif -%}
          {%- endif -%}
        {%- endif -%}

        {%- if item_data.item.runtime_ticks -%}
          {{ ' ‚Ä¢ ‚è±Ô∏è ' + (item_data.item.runtime_ticks // 600000000)|string + 'm' }}
        {%- endif -%}

        {%- if item_data.ratings and item_data.ratings|length > 0 -%}
          \n‚≠ê
          {%- for rating_key, rating_data in item_data.ratings.items() -%}
            {%- if rating_key == 'imdb' -%}
              IMDb: {{ rating_data.value }}
            {%- elif rating_key == 'rotten_tomatoes' -%}
              RT: {{ rating_data.value }}%
            {%- elif rating_key == 'metacritic' -%}
              MC: {{ rating_data.value }}
            {%- elif rating_key == 'tmdb' -%}
              TMDb: {{ rating_data.value }}
            {%- endif -%}
            {%- if not loop.last %} ‚Ä¢ {% endif -%}
          {%- endfor -%}
        {%- endif -%}

        {%- if item_data.item.imdb_id or item_data.item.tmdb_id or item_data.item.tvdb_id -%}
          \nüîó
          {%- if item_data.item.imdb_id -%}
            [IMDb](https://www.imdb.com/title/{{ item_data.item.imdb_id }}/)
          {%- endif -%}

          {%- if item_data.item.tmdb_id -%}
            {%- if item_data.item.imdb_id %} ‚Ä¢ {% endif -%}
            [TMDb](https://www.themoviedb.org/movie/{{ item_data.item.tmdb_id }})
          {%- endif -%}

          {%- if item_data.item.tvdb_id -%}
            {%- if item_data.item.imdb_id or item_data.item.tmdb_id %} ‚Ä¢ {% endif -%}
            {%- if item_data.ratings and item_data.ratings.tvdb and item_data.ratings.tvdb.proper_url -%}
              [TVDb]({{ item_data.ratings.tvdb.proper_url }})
            {%- else -%}
              [TVDb](https://thetvdb.com/dereferrer/series/{{ item_data.item.tvdb_id }})
            {%- endif -%}
          {%- endif -%}
        {%- endif -%}",
          "inline": false
        }{% if not loop.last %},{% endif %}
        {% endfor %}

        {# Additional movies notification if exceeds display limit #}
        {% if new_items|length > 8 %}
        ,{
          "name": "‚ûï Additional Movies",
          "value": "...and {{ new_items|length - 8 }} more movie
        {%- if new_items|length - 8 > 1 -%}s{%- endif %} added.",
          "inline": false
        }
        {% endif %}
      ],
      "thumbnail": {
        "url": "{{ jellyfin_url }}/web/assets/img/banner-light.png"
      },
      "footer": {
        "text": "Added to Jellyfin ‚Ä¢ {{ timestamp[:19] | replace('T', ' ') }} UTC",
        "icon_url": "{{ jellyfin_url }}/web/favicon.png"
      },
      "timestamp": "{{ timestamp }}"
    }

    {% elif category == 'tv' %}
    {# ==================== TV EPISODES EMBED ==================== #}
    {
      "title": "üì∫ New TV Episodes Added ({{ total_items }})",
      "description": "The following TV episodes have been added to Jellyfin:",
      "color": 65280,
      "fields": [
        {# Process up to 10 episodes to stay within Discord limits #}
        {% for item_data in new_items[:10] %}
        {
          {# Episode identifier with series name and episode number #}
          "name": "{{ item_data.item.series_name }} S{{ '%02d'|format(item_data.item.season_number|default(0)) }}E{{ '%02d'|format(item_data.item.episode_number|default(0)) }}",

          {# Episode details - max 1024 chars #}
          "value": "**{{ item_data.item.name }}**
        {%- if item_data.item.overview -%}
          \n*{{ (item_data.item.overview[:120] + '...') if item_data.item.overview|length > 120 else item_data.item.overview }}*
        {%- endif -%}

        {%- if item_data.item.video_height -%}
          \nüìê {{ item_data.item.video_height }}p
          {%- if item_data.item.video_range and item_data.item.video_range != 'SDR' -%}
            {{ ' ' + item_data.item.video_range }}
          {%- endif -%}
        {%- endif -%}

        {%- if item_data.item.video_codec -%}
          {{ ' ‚Ä¢ üéûÔ∏è ' + item_data.item.video_codec.upper() }}
        {%- endif -%}

        {%- if item_data.item.audio_codec -%}
          {{ ' ‚Ä¢ üîä ' + item_data.item.audio_codec.upper() }}
          {%- if item_data.item.audio_channels -%}
            {{ ' ' + item_data.item.audio_channels|string + '.' }}
            {%- if item_data.item.audio_channels > 2 -%}1{%- else -%}0{%- endif -%}
          {%- endif -%}
        {%- endif -%}

        {%- if item_data.item.runtime_ticks -%}
          {{ ' ‚Ä¢ ‚è±Ô∏è ' + (item_data.item.runtime_ticks // 600000000)|string + 'm' }}
        {%- endif -%}

        {%- if item_data.ratings and item_data.ratings|length > 0 -%}
          \n‚≠ê
          {%- for rating_key, rating_data in item_data.ratings.items() -%}
            {%- if rating_key == 'imdb' -%}
              IMDb: {{ rating_data.value }}
            {%- elif rating_key == 'tvdb' -%}
              TVDb: {{ rating_data.value }}
            {%- elif rating_key == 'tmdb' -%}
              TMDb: {{ rating_data.value }}
            {%- endif -%}
            {%- if not loop.last %} ‚Ä¢ {% endif -%}
          {%- endfor -%}
        {%- endif -%}

        {%- if item_data.item.imdb_id or item_data.item.tmdb_id or item_data.item.tvdb_id -%}
          \nüîó
          {%- if item_data.item.imdb_id -%}
            [IMDb](https://www.imdb.com/title/{{ item_data.item.imdb_id }}/)
          {%- endif -%}

          {%- if item_data.item.tmdb_id -%}
            {%- if item_data.item.imdb_id %} ‚Ä¢ {% endif -%}
            [TMDb](https://www.themoviedb.org/tv/{{ item_data.item.tmdb_id }})
          {%- endif -%}

          {%- if item_data.item.tvdb_id -%}
            {%- if item_data.item.imdb_id or item_data.item.tmdb_id %} ‚Ä¢ {% endif -%}
            {%- if item_data.ratings and item_data.ratings.tvdb and item_data.ratings.tvdb.proper_url -%}
              [TVDb]({{ item_data.ratings.tvdb.proper_url }})
            {%- elif item_data.item.item_type == 'Episode' -%}
              [TVDb](https://thetvdb.com/episodes/{{ item_data.item.tvdb_id }})
            {%- elif item_data.item.item_type == 'Series' -%}
              [TVDb](https://thetvdb.com/series/{{ item_data.item.tvdb_id }})
            {%- else -%}
              [TVDb](https://thetvdb.com/dereferrer/series/{{ item_data.item.tvdb_id }})
            {%- endif -%}
          {%- endif -%}
        {%- endif -%}",
          "inline": false
        }{% if not loop.last %},{% endif %}
        {% endfor %}

        {# Additional episodes notification if exceeds display limit #}
        {% if new_items|length > 10 %}
        ,{
          "name": "‚ûï Additional Episodes",
          "value": "...and {{ new_items|length - 10 }} more episode
        {%- if new_items|length - 10 > 1 -%}s{%- endif %} added.",
          "inline": false
        }
        {% endif %}
      ],
      "thumbnail": {
        "url": "{{ jellyfin_url }}/web/assets/img/banner-light.png"
      },
      "footer": {
        "text": "Added to Jellyfin ‚Ä¢ {{ timestamp[:19] | replace('T', ' ') }} UTC
        {%- if tvdb_attribution_needed %}\nMetadata provided by TheTVDB{% endif %}",
        "icon_url": "{{ jellyfin_url }}/web/favicon.png"
      },
      "timestamp": "{{ timestamp }}"
    }

    {% elif category == 'music' %}
    {# ==================== MUSIC EMBED ==================== #}
    {
      "title": "üéµ New Music Added ({{ total_items }})",
      "description": "The following music has been added to Jellyfin:",
      "color": 65280,
      "fields": [
        {# Process up to 12 tracks to stay within Discord limits #}
        {% for item_data in new_items[:12] %}
        {
          {# Track title - max 256 chars #}
          "name": "{{ (item_data.item.name[:250] + '...') if item_data.item.name|length > 250 else item_data.item.name }}",

          {# Track details - max 1024 chars #}
          "value": "
        {%- if item_data.item.album -%}
          üìÄ **{{ item_data.item.album }}**\n
        {%- endif -%}

        {%- if item_data.item.artists and item_data.item.artists|length > 0 -%}
          üé§ {{ item_data.item.artists[:2]|join(', ') }}
          {%- if item_data.item.artists|length > 2 -%}
            {{ ' +' + (item_data.item.artists|length - 2)|string + ' more' }}
          {%- endif -%}\n
        {%- endif -%}

        üîä {{ item_data.item.audio_codec.upper() if item_data.item.audio_codec else 'Unknown' }}

        {%- if item_data.item.audio_channels -%}
          {{ ' ' + item_data.item.audio_channels|string + '.' }}
          {%- if item_data.item.audio_channels > 2 -%}1{%- else -%}0{%- endif -%}
        {%- endif -%}

        {%- if item_data.item.audio_bitrate -%}
          {{ ' ‚Ä¢ ' + (item_data.item.audio_bitrate / 1000)|int|string + ' kbps' }}
        {%- endif -%}

        {%- if item_data.item.runtime_ticks -%}
          {{ ' ‚Ä¢ ‚è±Ô∏è ' + (item_data.item.runtime_ticks // 600000000)|string + 'm' }}
        {%- endif -%}",
          "inline": false
        }{% if not loop.last %},{% endif %}
        {% endfor %}

        {# Additional tracks notification if exceeds display limit #}
        {% if new_items|length > 12 %}
        ,{
          "name": "‚ûï Additional Tracks",
          "value": "...and {{ new_items|length - 12 }} more track
        {%- if new_items|length - 12 > 1 -%}s{%- endif %} added.",
          "inline": false
        }
        {% endif %}
      ],
      "thumbnail": {
        "url": "{{ jellyfin_url }}/web/assets/img/banner-light.png"
      },
      "footer": {
        "text": "Added to Jellyfin ‚Ä¢ {{ timestamp[:19] | replace('T', ' ') }} UTC",
        "icon_url": "{{ jellyfin_url }}/web/favicon.png"
      },
      "timestamp": "{{ timestamp }}"
    }

    {% elif category == 'other' %}
    {# ==================== OTHER CONTENT EMBED ==================== #}
    {
      "title": "üìÅ New Content Added ({{ total_items }})",
      "description": "The following content has been added to Jellyfin:",
      "color": 65280,
      "fields": [
        {# Process up to 10 items to stay within Discord limits #}
        {% for item_data in new_items[:10] %}
        {
          {# Item name - max 256 chars #}
          "name": "{{ (item_data.item.name[:250] + '...') if item_data.item.name|length > 250 else item_data.item.name }}",

          {# Item details - max 1024 chars #}
          "value": "üìÇ **{{ item_data.item.item_type }}**
        {%- if item_data.item.overview -%}
          \n*{{ (item_data.item.overview[:100] + '...') if item_data.item.overview|length > 100 else item_data.item.overview }}*
        {%- endif -%}

        {%- if item_data.item.video_height -%}
          \nüìê {{ item_data.item.video_height }}p
          {%- if item_data.item.video_codec -%}
            {{ ' ‚Ä¢ üéûÔ∏è ' + item_data.item.video_codec.upper() }}
          {%- endif -%}
        {%- endif -%}

        {%- if item_data.item.audio_codec -%}
          {{ ' ‚Ä¢ üîä ' + item_data.item.audio_codec.upper() }}
        {%- endif -%}

        {%- if item_data.ratings and item_data.ratings|length > 0 -%}
          \n‚≠ê
          {%- for rating_key, rating_data in item_data.ratings.items() -%}
            {%- if rating_key == 'imdb' -%}
              IMDb: {{ rating_data.value }}
            {%- elif rating_key == 'tmdb' -%}
              TMDb: {{ rating_data.value }}
            {%- endif -%}
            {%- if not loop.last %} ‚Ä¢ {% endif -%}
          {%- endfor -%}
        {%- endif -%}

        {%- if item_data.item.imdb_id or item_data.item.tmdb_id or item_data.item.tvdb_id -%}
          \nüîó
          {%- if item_data.item.imdb_id -%}
            [IMDb](https://www.imdb.com/title/{{ item_data.item.imdb_id }}/)
          {%- endif -%}

          {%- if item_data.item.tmdb_id -%}
            {%- if item_data.item.imdb_id %} ‚Ä¢ {% endif -%}
            [TMDb](https://www.themoviedb.org/
            {%- if item_data.item.item_type == 'Movie' -%}movie
            {%- elif item_data.item.item_type == 'Series' -%}tv
            {%- else -%}tv
            {%- endif -%}/{{ item_data.item.tmdb_id }})
          {%- endif -%}

          {%- if item_data.item.tvdb_id -%}
            {%- if item_data.item.imdb_id or item_data.item.tmdb_id %} ‚Ä¢ {% endif -%}
            {%- if item_data.ratings and item_data.ratings.tvdb and item_data.ratings.tvdb.proper_url -%}
              [TVDb]({{ item_data.ratings.tvdb.proper_url }})
            {%- elif item_data.item.item_type == 'Episode' -%}
              [TVDb](https://thetvdb.com/episodes/{{ item_data.item.tvdb_id }})
            {%- elif item_data.item.item_type == 'Series' -%}
              [TVDb](https://thetvdb.com/series/{{ item_data.item.tvdb_id }})
            {%- else -%}
              [TVDb](https://thetvdb.com/dereferrer/series/{{ item_data.item.tvdb_id }})
            {%- endif -%}
          {%- endif -%}
        {%- endif -%}",
          "inline": false
        }{% if not loop.last %},{% endif %}
        {% endfor %}

        {# Additional items notification if exceeds display limit #}
        {% if new_items|length > 10 %}
        ,{
          "name": "‚ûï Additional Items",
          "value": "...and {{ new_items|length - 10 }} more item
        {%- if new_items|length - 10 > 1 -%}s{%- endif %} added.",
          "inline": false
        }
        {% endif %}
      ],
      "thumbnail": {
        "url": "{{ jellyfin_url }}/web/assets/img/banner-light.png"
      },
      "footer": {
        "text": "Added to Jellyfin ‚Ä¢ {{ timestamp[:19] | replace('T', ' ') }} UTC
        {%- if tvdb_attribution_needed %}\nMetadata provided by TheTVDB{% endif %}",
        "icon_url": "{{ jellyfin_url }}/web/favicon.png"
      },
      "timestamp": "{{ timestamp }}"
    }
    {% endif %}
  ]
}